Francisco Nebrera Perdomo

eys
te puedo hacer una cuestión rápida?

Daniel Díaz

hey, sí, dime

Francisco Nebrera Perdomo

pairs :: [a] -> [b] -> [(a,b)]
pairs xs ys = do x <- xs
y <- ys
return (x, y)

--pairs' :: [a] -> [b] -> [(a,b)]
--pairs' xs ys = xs >>= 
-- (\x -> ys >>=
-- (\y -> return (x,y)))

fa :: [(Integer,Integer)]
fa = [3..4] >>= (\x -> [1..2] >>= (\_ -> return (x, 42)))
las dos funciones después de pairs no compilan

Daniel Díaz

pueees, mirando así la segundo (la comentada)
no le veo nada...

Francisco Nebrera Perdomo

mira
esto sé que suena feo
pero
será el compilador?
xD
porque fa es un ejemplo de internet
que debería tirar
:S:S
y yo seguí tus pasos al pie de la letra
voy a probar el compilador viejo

Daniel Díaz

prueba sin el layout
¿qué compilador es ese?
pairs' xs ys = xs >>= (\x -> ys >>= (\y -> return (x,y)))

Francisco Nebrera Perdomo

tendré que declarar el bind para listas
pa que tire?

Daniel Díaz

a ver...
dame ese mensaje de error

Francisco Nebrera Perdomo

*Main> pairs' [1,2] [1,2]

<interactive>:2:8:
Couldn't match expected type ‘Maybe t’ with actual type ‘[Integer]’
Relevant bindings include
it :: Maybe (t, t1) (bound at <interactive>:2:1)
In the first argument of ‘pairs'’, namely ‘[1, 2]’
In the expression: pairs' [1, 2] [1, 2]
In an equation for ‘it’: it = pairs' [1, 2] [1, 2]

<interactive>:2:14:
Couldn't match expected type ‘Maybe t1’
with actual type ‘[Integer]’
Relevant bindings include
it :: Maybe (t, t1) (bound at <interactive>:2:1)
In the second argument of ‘pairs'’, namely ‘[1, 2]’
In the expression: pairs' [1, 2] [1, 2]
In an equation for ‘it’: it = pairs' [1, 2] [1, 2]

Daniel Díaz

no estoy viendo todo...
esos son errores en el intérprete
osea que lo que tengas de código te está compinado
*comilando
*compilando
es lo que pones en el intérprete lo que no te está aceptando
"it" es la variable que guarda la última expresión que has mandado al intérprete

Francisco Nebrera Perdomo

compila pero se cree que son Maybes
sin el layout
probé 7.8.4 y 7.10.1 RC2

Daniel Díaz

no es la versión de GHC

Francisco Nebrera Perdomo

quién me habrá mandado a pillar este lenguaje
xD
Ok, modules loaded: Main.
*Main> pairs' [1,2] [1,2]

Daniel Díaz

en mi consola
Prelude> let pairs' :: [a] -> [b] -> [(a,b)] ; pairs' xs ys = xs >>= (\x -> ys >>= (\y -> return (x,y)))
Prelude> pairs' [1,2] [1,2]
[(1,1),(1,2),(2,1),(2,2)]

Francisco Nebrera Perdomo

:S
dios

Daniel Díaz

¿puedo ver tu módulo?
la definición de pairs' está bien

Francisco Nebrera Perdomo

te paso el fichero
es la parte de abajo
yo no uso módulos
debería?

Daniel Díaz

el fichero me refería
osea, estás usando un módulo quieras o no
si no le pones nombre se llama "Main"

Francisco Nebrera Perdomo

tu correo como era?

Daniel Díaz

****@****.**

Francisco Nebrera Perdomo

ya lo deberías tener
creo que en ese hiding está la clave

Daniel Díaz

pues ya está

Francisco Nebrera Perdomo

xDDDDDDDDDDDDDDDD

Daniel Díaz

sí, sólo tuve que leer esa línea

Francisco Nebrera Perdomo

jkasjkaskjsajkas
y qué hago pa que no entre en conflicto con la mónada maybe?

Daniel Díaz

y más abajo
(>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b
así que el tipo se lo has dejado claro

Francisco Nebrera Perdomo

xDDDDDDDDD
okok
entonces qué hago?
será mejor un nuevo fichero?

Daniel Díaz

las clases existen precisamente para que varios tipos comparten funciones
del mismo nombre
si quieres redefinir cosas por aprender o experimentar, hay varias formas
una sería que omitieras importar la clase entera, y definieras la clase Monad tú
aunque, veo más práctico definir otra
en plan...
class Monad2 m where
(>>>= ) :: m a -> (a -> m b) -> m b
return2 :: a -> m a
por ejemplo...
entonces usas esa
así puedes probar las dos clases a la vez
comparar, etc
aunque digo todo esto sin saber exactamente lo que tienes planteado

Francisco Nebrera Perdomo

joder
qué wapo eso
xD
no lo había pensado
te enteras bastante, cabrón
xD
sorry xq estaba mi padre en el cuarto y quería pedir cita pa la ITV

Daniel Díaz

no te preocupes

Francisco Nebrera Perdomo

pues nada, yo estoy de momento aprendiendo esto
y ahora quería desplegar un poco
la ejecución de la mónada lista
pa entenderla mejor

Daniel Díaz

así veo

Francisco Nebrera Perdomo

aunque en realidad está claro lo que hace más o menos

Daniel Díaz

ya viste la clase Monoid, ¿no?

Francisco Nebrera Perdomo

sí
en LYAH
es una especie de clase que puede hacer operaciones
que les da igual la asociatividad
algo de eso era
lo leí hace tiempo

Daniel Díaz

jaja

Francisco Nebrera Perdomo

y el curro mío es en C++
así que vivo entre dos mundos
xD

Daniel Díaz

entiendo
bueno
pues
un monoide es una estructura matemática, en realidad
básicamente, un conjunto con una operación asociada, de manera que la operación sea asociativa y tenga un elemento neutro...
suena a palabrería loca, pero es más sencillo de lo que parece
aunque, supongo que te dieron Álgebra en la Universidad?

Francisco Nebrera Perdomo

sí

Daniel Díaz

en cualquier caso, si no conoces el concepto, se puede explicar con tipos del mismo modo

Francisco Nebrera Perdomo

sisi

Daniel Díaz

cambiando conjunto por tipo, básicamente

Francisco Nebrera Perdomo

okok
sí yo tuve álgebra
de hecho me compré hace nada
un libro de teoría de las categorías

Daniel Díaz

jaja el tópico de que necesitas category theory para hacer Haskell...

Francisco Nebrera Perdomo

pero cuando tenga tiempo lo tocaré porque de momento estoy con el proyecto y las prácticas
me da curiosidad
xD
el libro está muy bien escrito
el tío ni se molestó en cambiar la salida por defecto de LaTeX

Daniel Díaz

a mi personalmente, me parece extraño esa tendencia en Haskell

Francisco Nebrera Perdomo

pero el contenido está muy cuidado

Daniel Díaz

Teoría de Categorías me pareció natural, tras estudiar diferentes estructuras matemáticas

Francisco Nebrera Perdomo

todo es natural
al fin y al cabo

Daniel Díaz

como una puesta en común para Álgebra Lineal, Teoría de la Medida, Teoría de Grupos, etc

Francisco Nebrera Perdomo

yo por ejemplo estoy haciendo reconocimiento de caras en C++

Daniel Díaz

pero para aprender Haskell, me parece una distracción

Francisco Nebrera Perdomo

y a mi colega que tiene la fp y pasa de las mates
pues se le ocurrió la Chi cuadrado
el filtro de mediana

Daniel Díaz

aha

Francisco Nebrera Perdomo

y varios conceptos más
y el ni sabía
que eran esos xD
hoy por ejemplo
pa ganarnos 30€
programamos un simplex
sencillito
xD
tengo que buscarme la vida xDDDDDDDDD
pero sí
lo que dices tiene sentido
pero le voy a dar duro a esa tería
teoría
y al lambda cálculo
(este no me digas que no tiene k ver con haskell xq te hundo el pecho xDD)

Daniel Díaz

lambda cálculo sí está estrechamente relacionado

Francisco Nebrera Perdomo

okok xD

Daniel Díaz

no digo que no tenga nada que ver... todo tiene

Francisco Nebrera Perdomo

k si tio k era una broma
xd
le quieres echar un vistazo a mi tutorial?
las últimas 10 páginas te sonarán
xD

Daniel Díaz

ok

Francisco Nebrera Perdomo

ya lo tienes
xd

Daniel Díaz

llevas ya un rato escrito

Francisco Nebrera Perdomo

qué me vas a contar
jkaskjasjkaskj
y gracias a tí lo de las mónadas
te nombré en la memoria del TFG y todo
serás famoso
xDDDDDDDDDDd

Daniel Díaz

me acaban de llamar ofreciéndome un curso sobre la biblia
curiosamente, mucho más educado que los de Jazztel

Francisco Nebrera Perdomo

xDDDDDDDDDD
según tú me dijiste que las mónadas son una clase como otra cualquiera
y resultó ser cierto
yo te digo que la Biblia es el mejor libro jamás escrito

Daniel Díaz

¿por qué te iba a mentir?

Francisco Nebrera Perdomo

o al menos está en el podio
xDD

Daniel Díaz

el que tiene más ventas, seguro
lleva ya unos cuantos años vendiéndose
en realidad Monad tiene dos métodos más...
pero tienen definiciones por defecto, así que no nos hace falta definirlas
pero podríamos en caso de que quisiéramos que funcionaran diferente

Francisco Nebrera Perdomo

hmm
interesante
eso pa dentro de un par de días
cuando tú puedas
pero la verdad que me dejaste el concepto bastante más claro

Daniel Díaz

si dejas que termine una cosilla... puedo ponerme
serán pocos minutos

Francisco Nebrera Perdomo

okok guay
así termino yo la expansión de esa expresión

Francisco Nebrera Perdomo

concat (map (\x -> concat (map (\y -> return (x,y)) ys)) xs)
jue jue jue jue :D

Daniel Díaz

jaja
ya casi tengo esto
vale, listo

Francisco Nebrera Perdomo

ok
estaba terminando la sección de la mónada lista

Daniel Díaz

¿algún problema
?

Francisco Nebrera Perdomo

no
la verdad que perfecto
lo único es que todo estoy
esto*
hay que interiorizarlo
no es hacerlo un día y listo
necesita mucha práctica y papel y boli

Daniel Díaz

sí

Francisco Nebrera Perdomo

para que todo entre realmente y haskell me programe a mí

Daniel Díaz

jaja
creo que este link es muy útil: http://downloads.haskell.org/~ghc/latest/docs/html/libraries/
por ahora, con que tengas el Prelude a mano, está bien
además, puedes ver la definición de cada función en un solo click
a la derecha en el botón "source"
busca Prelude en el índice, y puedes probar

Francisco Nebrera Perdomo

ok
joder
cojonudo

Daniel Díaz

es cierto que los links esos a veces funcionan un poco raro

Francisco Nebrera Perdomo

siempre había querido algo como eso
LYAH se basa en eso un montón
y otros muchos textos
como razonando con haskell

Daniel Díaz

¿en qué se basan?

Francisco Nebrera Perdomo

en ver cómo están hechas las cosas en el Prelude
mira esto
import GHC.Magic ()
xDDDDDDDDDDDDDD
invoca a harry potter o k

Daniel Díaz

jajaja

Francisco Nebrera Perdomo

me dijiste que en haskell no había nada mágico
xDDDDDDDDDD

Daniel Díaz

jamás dije eso!

Francisco Nebrera Perdomo

xDDD

Daniel Díaz

simplemente, la clase Monad no

Francisco Nebrera Perdomo

okok

Daniel Díaz

http://downloads.haskell.org/~ghc/latest/docs/html/libraries/ghc-prim-0.3.1.0/GHC-Magic.html

Francisco Nebrera Perdomo

entonces hay un par de brujos por ahí pululando

Daniel Díaz

pero vamos, no te fijes demasiado en eso ahora
te lo di por si tenías curiosidad jaja

Francisco Nebrera Perdomo

sisi
xD
está curioso
sí yo siempre tengo curiosidad
ahora lo que tengo es poco tiempo
pero nada
disciplina espartana y listo

Daniel Díaz

vale
pues
te comentaba de la clase Monoid por un motivo
supongo que habrás leido algo sobre una mónada Writer

Francisco Nebrera Perdomo

sí
y de esa sí que tenía dudas
pero claro, fue antes de tu super clase

Daniel Díaz

jaja
pues verás
la mónada Writer y la clase Monoid están íntimamente relacionadas
hay otras formas de hacer la mónada Writer, pero actualmente es básicamente añadir un parámetro a un monoide
en otras palabras
sea 'm' una mónada (de las que ya tanto conocemos!)
no no no
empiezo de nuevo
sea 'm' un monoide
jajaja
definimos Writer m a = Writer m a
jaja, sencillo
como Haskell válido sería...
data Writer m a = Writer m a
osea, un valor del tipo 'Writer m a' no es más que un par de valores
el primero es de tipo 'm' y el segundo de tipo 'a'

Francisco Nebrera Perdomo

ok

Daniel Díaz

Writer m a ~ (m,a)

Francisco Nebrera Perdomo

es decir, contiene un monoide y un 'a' como datos

Daniel Díaz

quiero decir con esto que tienen los mismos valores, como en a ~ Identity a

Francisco Nebrera Perdomo

es decir
es una tupla?

Daniel Díaz

fíjate bien
puedes hacer una correspondencia de valores
Writer 1 2 -> (1,2)
Writer a b -> (a,b)
le ponemos otro nombre, pero en esencia es lo que mismo que los pares

Francisco Nebrera Perdomo

okok

Daniel Díaz

vale, ahora Writer :: * -> * -> *
osea que Writer no puede ser mónada
pero esto no es sorpresa
hemos de fijar el monoide primero
hablando de ello, ¿necesitas repaso con los monoids?

Francisco Nebrera Perdomo

la verdad es que un poco

Daniel Díaz

vale

Francisco Nebrera Perdomo

pero eso lo podría hacer yo si es mucho jaleo

Daniel Díaz

qué va
es sencillo
class Monoid m where
mappend :: m -> m -> m
mempty :: m
y sobre cómo hacer una instancia no hay más que ver los tipos
hay que definir un operador sobre elementos de m
y dar un elemento 'mempty' de ese tipo

Francisco Nebrera Perdomo

sí

Daniel Díaz

eso basta para que compile

Francisco Nebrera Perdomo

creo recordar que mappend los juntaba
en uno solo

Daniel Díaz

pero... hay ciertas leyes que se presuponen ciertas sobre estas instancias

Francisco Nebrera Perdomo

y mempty daba el elemento neutro

Daniel Díaz

mappend toma dos elementos del tipo m, y devuelve otro del tipo m
es todo

Francisco Nebrera Perdomo

ok

Daniel Díaz

mempty te da un valor del tipo m, siempre el mismo
como decía, hay reglas que una instancia debe obedecer
porque cualquier programador las va a asumir 
cuando utilice tu instancia

Francisco Nebrera Perdomo

okok

Daniel Díaz

(incluido tú mismo)
son como reglas más allá del compilador
que los programadores tenemos en acuerdo
las reglas de clase Monoid son...
asociatividad: dados a,b,c :: m, mappend a (mappend b c) = mappend (mappend a b) c
elemento neutro: dado a :: m, mappend mempty a = mappend a mempty = a
hay un alias para la función "mappend", que es más común que escribir el operador en sí
(<>) = mappend
usando el operador (<>) las reglas quedan
asociatividad: dados a,b,c :: m, a <> (b <> c) = (a <> b) <> c
elemento neutro: dado a :: m, mempty <> a = a <> mempty = a
bastante más legible

Francisco Nebrera Perdomo

sí

Daniel Díaz

ok, pues veamos un ejemplo de instancia...
las más sencillas son las numéricas
en plan
instance Monoid Int where
mappend = (+)
mempty = 0
los tipos encajan, y por lo que sabemos desde que somos chiquititos, también las leyes Monoid

Francisco Nebrera Perdomo

xDDDD

Daniel Díaz

también podríamos escribir...
instance Monoid Int where
mappend = (*)
mempty = 1
y repito lo dicho...
si te fijas, no hay una sola forma de hacer la instancia
pero sólo podemos hacer una en un mismo contexto
o el compilador se quejará de múltiples instancia

Francisco Nebrera Perdomo

ok

Daniel Díaz

el equipo de Haskell, en esos casos, decidió que no habría instancia Monoid por defecto
ni (+), ni (*), ni nada
así que Int no es instancia de Monoid per sé, a no ser que le hagas tú la instancia
otros casos son más claros, como es el caso de las listas

Francisco Nebrera Perdomo

tiene sentido

Daniel Díaz

instance Monoid [a] where
mappend = (++)
mempty = []
ahora quizás tengas que pensar un poquito para ver por qué las reglas se cumplen

Francisco Nebrera Perdomo

todo está claro creo

Daniel Díaz

sí
bien
pues esos son los monoides
volvemos con Writer entonces
dado un tipo 'm', sin necesidad de que sea monoide (instancia de la clase Monoid), podemos hacer 'Writer m' instancia de Functor
Writer m :: * -> *

Francisco Nebrera Perdomo

sí
y de monad

Daniel Díaz

para hacer la instancia Monad nos va a hacer falta que sea monoide...

Francisco Nebrera Perdomo

ok

Daniel Díaz

o, al menos, para hacer que sea útil...
podremos hacer una instancia, sí, pero no tendrá la funcionalidad que buscamos
veremos por qué 
la instancia a Functor del tipo 'Writer m' es como la de la identidad, pero arrastramos un valor adicional
instance Functor (Writer m) where
fmap f (Writer m a) = Writer m (f a)
¿claro?

Francisco Nebrera Perdomo

sí
es decir la m "no varía"
y a la a se le aplica f

Daniel Díaz

el valor m no lo podemos cambiar, porque ni siquiera es un parámetro en el tipo Writer m
el resultado, sea el que sea, tiene que ser de tipo Wrtier m b
donde m es la misma
si miramos a la izquierda del igual, 'm' es el único valor de ese tipo que podemos poner ahí

Francisco Nebrera Perdomo

más o menos te entiendo
te basas en
fmap :: f a -> (a -> b) -> f b
al revés
perdón

Daniel Díaz

fmap :: (a -> b) -> f a -> f b
si
f = Writer m
así que...

Francisco Nebrera Perdomo

exacto
pero Writer qué es?

Daniel Díaz

fmap :: (a -> b) -> Writer m a -> Writer m b
lo puse antes

Francisco Nebrera Perdomo

una especie de nombre para el constructor de tuplas?

Daniel Díaz

data Writer m a = Writer m a

Francisco Nebrera Perdomo

un dato con dos parámetros

Daniel Díaz

lo que era equivalente a los pares era un comentario, pero lo vamos a usar como tipo a parte
sí

Francisco Nebrera Perdomo

okok

Daniel Díaz

pero vamos, sí, Writer es un constructor con dos parámetros
si fijamos el primero, podemos implementar fmap sobre el segundo

Francisco Nebrera Perdomo

ok

Daniel Díaz

ahora la pregunta sería
¿podemos hacer "Writer m" instancia de Monad?

Francisco Nebrera Perdomo

yo creo que sí

Daniel Díaz

si no exigimos nada a 'm', vamos a tener problemas

Francisco Nebrera Perdomo

si primero la hacemos monoide

Daniel Díaz

osea, que no todo lo de kind "* ->*" puede ser Monad
vamos a toparnos con el problema antes de darle solución
empecdemos la instancia, como siempre, con return
instance Monad (Writer m) where
return :: a -> Writer m a
return a = ... ?

Francisco Nebrera Perdomo

Writer m a

Daniel Díaz

m ?
no veo dónde está definida

Francisco Nebrera Perdomo

claro
xd

Daniel Díaz

no veo ningún valor 'm' en el contexto 
problema encontrado...
no podemos construir valores de un tipo cualquiera
así de la nada
de hecho, te puedo hacer un tipo que no tenga ningún valor
por ejemplo
data Nada
(sí, eso se puede hacer...)

Francisco Nebrera Perdomo

joder
xd

Daniel Díaz

así que, necesitamos tener una clase que nos asegure que podemos sacar elementos de ese tipo
voy a hacer una clase de momento llamada Pointed, ok?

Francisco Nebrera Perdomo

ok

Daniel Díaz

class Pointed t where
point :: t
será la clase de tipos que tienen al menos un elemento
al que llamo point (por llamarle algo)
ahora puedo hacer...
instance Pointed m => Monad (Writer m) wehre
return a = Writer point a
eso nos va a compilar, cierto?

Francisco Nebrera Perdomo

si

Daniel Díaz

porque del contexto Pointed m... podemos usar el valor "point"
no sé si voy muy rápido

Francisco Nebrera Perdomo

es que por ejemplo el concepto de clase y tal
no lo tengo muy claro pero da =

Daniel Díaz

ok, una clase es un conjunto de tipos que compartes una serie de funciones
*comparten

Francisco Nebrera Perdomo

ok, typeclass
como Eq, Integral..........

Daniel Díaz

una clase sería como el conjunto de sus instancias
a ver, mejor dicho
tomemos la clase Eq
tiene unos métodos, (==) y (/=)
y unas instancias que comparten esos métodos: Int, Integer, Double, etc
digo que comparten, porque escribimos (==) para cualquiera de sus instancias

Francisco Nebrera Perdomo

sí

Daniel Díaz

no usamos un operador diferente para cada una, usamos el mismo
para definir una clase
escribimos
class NombreDeLaClase t where
[lista de métodos junto a su tipo]

Francisco Nebrera Perdomo

ok

Daniel Díaz

una vez una clase está definida, podemos añadirla al contexto de cualquier función
el contexto es una parte de la declaración de tipo
que indica una restricción en el polimorfismo de ese tipo
por ejemplo
sort :: Ord a => [a] -> [a]
el contexto es lo que hay a la izquierda del =>

Francisco Nebrera Perdomo

ok

Daniel Díaz

nos dice que "sort" es polimórfica en a, sí, pero sólo tipos que sean instancia de la clase Ord
pueden ser usados
a la hora de definir "sort", podremos usar los métodos de la clase Ord
porque el contexto nos indica que 'a' es instancia de esta clase
¿me explico?

Francisco Nebrera Perdomo

sisi
eso lo he hecho miles de veces
te obliga a cumplir ciertas condiciones

Daniel Díaz

ok, pero tenías duda de cómo funcionan las clases

Francisco Nebrera Perdomo

sisi hombre, está perfecta la explicación
xd
pero claro definiste una tú mismo, eso me traba más
pero perfecto sí

Daniel Díaz

ok
puedes definir todas las que quieras
estaba tratando de motivar la presencia de la clase Monoid como contexto de la instancia Monad de Wrtier
la idea era partir sin contexto
y definir una clase poniendo todo lo que me haga falta para terminar la instancia

Francisco Nebrera Perdomo

sisi
perfecto

Daniel Díaz

a ver, para ser más claro, voy a ponerle un nombre más claro
class ForWriter t where
something :: t
vale, para definir return
hemos necesitado un modo de sacar un elemento del tipo 'm' de alguna parte
porque nos quedabamos
return a = Writer ? a

Francisco Nebrera Perdomo

sí

Daniel Díaz

así que necesitamos que el tipo 'm' tenga un método para poder darle un valor
entonces he puesto "something" en una clase
para poder hacer
return a = Writer something a

Francisco Nebrera Perdomo

ah coño
okok

Daniel Díaz

¿ves esto?

Francisco Nebrera Perdomo

para que haya something para muchos tipos distintos
pa eso creaste la clase

Daniel Díaz

claro

Francisco Nebrera Perdomo

okok
buena idea tt

Daniel Díaz

así voy añadiendo al tipo abstracto 'm', las cosas que me hagan falta
luego añado
class ForWriter m => Monad (Writer m) where
y tengo todas esas cosas en contexto
¿se ve?

Francisco Nebrera Perdomo

sí más o menos

Daniel Díaz

"m" no sabré qué tipo es, en principio puede ser cualquiera, pero al menos sé que es instancia de ForWriter

Francisco Nebrera Perdomo

ok
o sea estás básicamente diciendo

Daniel Díaz

así puedo usar mi "something" y todo lo que le añada

Francisco Nebrera Perdomo

me quiero crear una mónada
no tengo el método something
pero si obligo a que el tipo de "m" tenga something
entonces lo tendré seguro
y "todo encaja"
como tu dices
xd

Daniel Díaz

exacto jaja
puede parecer un poco raro todo esto, pero creo que este tipo de razonamiento es bastante útil
así aprendes algo nuevo que no está en los libros
es parecido a añadir axiomas según me vaya haciendo falta

Francisco Nebrera Perdomo

tio
te veo super inseguro conmigo
debes tener clara dos cosas
1) lo que yo pueda opinar, te la debe sudar
2) tus clases me parecen cojonudas

Daniel Díaz

jajaja

Francisco Nebrera Perdomo

xD
mira
me puedes dar
15 min
pa cenar?

Daniel Díaz

sí, claro

Francisco Nebrera Perdomo

okok pues voy

Daniel Díaz

ok

Francisco Nebrera Perdomo

ya llegué
espero no interrumpirte más

Daniel Díaz

ok, un segundo

Francisco Nebrera Perdomo

pero en media horita o así tendré que ir al mercadona
okok

Daniel Díaz

Mercadona?

Francisco Nebrera Perdomo

sí

Daniel Díaz

ah, canrias
sí sí

Francisco Nebrera Perdomo

jajajaj
xDDDDDDDD

Daniel Díaz

vale, listo

Francisco Nebrera Perdomo

gracias por el cumplido
puede usted proseguir

Daniel Díaz

jaja
pues
ibamos por...
class ForWriter t where
something :: t
instance ForWriter m => Monad (Writer m) where
return a = Wrtier something a
vayamos al bind sin más dilación
en general, (>>=) :: Monad m => m a -> (a -> m b) -> m b
si m = Writer m...
(>>=) :: Writer m a -> (a -> Writer m b) -> Writer m b
Writer m a >>= f = ...
como a :: a
y f :: a -> Writer m b
empezaríamos usando eso
Writer m a >>= f = f a
ahora
eso "encaja", cierto?

Francisco Nebrera Perdomo

sí

Daniel Díaz

pero no estaríamos haciendo nada con la 'm'...
básicamente, añadiendo 'something's, y luego pasando de ellos

Francisco Nebrera Perdomo

sí

Daniel Díaz

así que vamos a tratar algo...
Writer m a >>= f =
let Writer m' b = f a
in ...
le he dado el nombre m' al elemento que está asociado con el resultado de 'f a'
y 'b' al valor adicional
m' :: m
b :: b
el resultado tiene que ser Writer m b, pero no queremos descartar el valor 'm'
lo ideal sería que tuviéramos una forma de combinar los valores m y m' en un tercero
para así no perder información
voy a añadir eso a nuestra clase
class ForWriter t where
something :: t
combine :: t -> t -> t
y ahora escribo
Writer m a >>= f =
let Writer m' b = f a
in Writer (combine m m') b
así tenemos una mónada que va combinando sus valores subyacentes en cada bind
¿dudas?
ahora voy a llevar esto a la práctica, pero quiero saber si pillas todo hasta ahora

Francisco Nebrera Perdomo

más o menos lo pillo
pero a estas horas cuesta un poco ya

Daniel Díaz

entiendo

Francisco Nebrera Perdomo

esta es más dura que las otras creo

Daniel Díaz

quizás te lié con la clase adicional

Francisco Nebrera Perdomo

pero eso nah, se lee mañana tu chat con calma
y listo
no no!
la clase adicional fue mejor

Daniel Díaz

pero si te fijas, nos ha salido la clase Monoid...

Francisco Nebrera Perdomo

lo que pasa que tengo que tener todo eso en el sublime text

Daniel Díaz

hemos añadido sólo lo que hemos ido necesitando
para hacer una instancia de Monad útil

Francisco Nebrera Perdomo

okok

Daniel Díaz

y nos ha quedado la clase Monoid
(si te fijas, es igual con otros nombres)

Francisco Nebrera Perdomo

sisi
vamos a ver
cuando tú dices
clase monoid
es simplemente unos tipos "estándar" de métodos no?
después tu los defines como quieras entre comillas
es decir

Daniel Díaz

clase en Haskell no significa lo mismo que en otros lenguajes como C++

Francisco Nebrera Perdomo

métodos con un cierto tipo

Daniel Díaz

no te líes...

Francisco Nebrera Perdomo

no no claro xD
me refiero a que

Daniel Díaz

clases en Haskell son Eq, Ord, Functor, Monad, etc

Francisco Nebrera Perdomo

si la clase se dice que es

Daniel Díaz

vale, vale
http://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.7.0.2/Data-Monoid.html
a eso me refiero

Francisco Nebrera Perdomo

m a -> m a -> m a
y a

Daniel Díaz

Monoid es una clase estándar
predefinida
se usa como contexto de la instancia Monad para Writer

Francisco Nebrera Perdomo

okok
más o menos algo voy pillando
xD

Daniel Díaz

instance Monoid m => Monad (Writer m)
pero me parecía muy forzado decirte: bueno, ahí ponemos Monoid y ya
porque yo l odigo

Francisco Nebrera Perdomo

jajajaja
xD

Daniel Díaz

así que me puse a definir la instancia

Francisco Nebrera Perdomo

está cojonuda la explicación tt

Daniel Díaz

y fui añadiendo en otra clase auxiliar lo que fuera necesitando
al final
la clase auxiliar que definimos
resultó ser la misma que Monoid
así ahí tienes tu explicación de por qué se hace así
te comenté que la clase Monoid tiene leyes
cuando decimos que una clase obedece leyes
significa que cuando hacemos una instancia, tratamos de que ciertas propiedades acerca de sus métodos se cumplan
en el caso de la clase Monoid
son las reglas de asociatividad y elemento neutro
arriba expuestas
estas reglas no son comprobadas por el compilador
así que el programador debe comprobarlas por su cuenta
cada vez que suministre una instancia

Francisco Nebrera Perdomo

okok

Daniel Díaz

Functor y Monad también tienes leyes
ahora viene lo más divertido

Francisco Nebrera Perdomo

f <*> x = fmap f x
creo
xDDDDDDDDDD

Daniel Díaz

y es que, si has visto, para hacer los tipos encajar, hemos necesitado de los métodos de la clase Monoid
lo genial es que, para hacer que las leyes de Monad se cumplan
te hacen falta las leyes de Monoid
(estoy hablando de la instancia de Writer)
y se me ocurre que sería genial ejercicio para ti

Francisco Nebrera Perdomo

ok, exactamente qué debería hacer?

Daniel Díaz

comprobar que la instancias que hemos hecho cumplen las leyes de Functor y Monad, suponiendo que el tipo m cumple las leyes de Monoid
http://downloads.haskell.org/~ghc/latest/docs/html/libraries/base-4.7.0.2/Control-Monad.html

Francisco Nebrera Perdomo

es decir

Daniel Díaz

ahí están descritas las leyes

Francisco Nebrera Perdomo

que ya tenemos la mónada hecha

Daniel Díaz

es básicamente un ejercicio de sustitución
sí
no tienes que escribir código
sólo demostrar que
fmap id == id
fmap (f . g) == fmap f . fmap g

Francisco Nebrera Perdomo

"sólo"
xDDDDDDDDDD

Daniel Díaz

para Functor
y...
return a >>= k == k a
m >>= return == m
m >>= (\x -> k x >>= h) == (m >>= k) >>= h
para Monad

Francisco Nebrera Perdomo

joder
eso te lo sabes todo
o lo copiaste de algun lado?

Daniel Díaz

lo estoy copiando
pero me lo sé casi todo

Francisco Nebrera Perdomo

ufff

Daniel Díaz

pero es lento de copia
jajaja

Francisco Nebrera Perdomo

joder
xDDDDDDDDD
menudo crack
xd

Daniel Díaz

osea, es que es algo que tienes que comprobar para cada instancia...

Francisco Nebrera Perdomo

okok
cuántos años llevas con haskell?

Daniel Díaz

desde 2008 o así

Francisco Nebrera Perdomo

okok
guay guay
pues tengo trabajo
pero joder en serio que gracias a tí estoy aprendiendo bastante
y cosas jodidas
no tonterías

Daniel Díaz

me alegro

Francisco Nebrera Perdomo

:D

Daniel Díaz

cuando estés haciéndolo
supón que el tipo 'm' ya cumple las reglas del monoid
mappend mempty x = x
mappend x mempty = x
mappend x (mappend y z) = mappend (mappend x y) z
vas a darte cuenta de que te van a hacer falta
es lo bonito de esto

Francisco Nebrera Perdomo

hombre
está muy wapo
pero está claro que requiere
muchísimo más tiempo
que un lenguaje imperativo

Daniel Díaz

por supuesto, reescribe la instancia usando Monoid, no la temporal que usamos

Francisco Nebrera Perdomo

okok
intentaré hacerlo
pero si me surjen dudas
porque soy bastante noob a la hora de hacer esas cosas
te preguntaré

Daniel Díaz

sí, claro

Francisco Nebrera Perdomo

por cómo empezar a poner el archivo y demás

Daniel Díaz

creo que será buen ejercicio para ti

Francisco Nebrera Perdomo

okok pues será hecho
bueno niño yo me tengo que ir al super
así que na, otro día te daré la lata
xD

Daniel Díaz

compra, compra
ya sabes dónde estoy

Francisco Nebrera Perdomo

venga niño gracias de nuevo!! :D

{-
Nothing >>= f = Nothing
(Just x) >>= f = Just (f x)

m >> k      = m >>= \_ -> k

case m of Nothing -> Nothing
          Just x  -> k

"a <- m ; e"
en "m >>= \a -> e"
y "m ; n" en "m >> n"

do c1 <- gooddiv a1 b1 ; c2 <- gooddiv a2 b2 ; return (c1 + c2)

gooddiv a1 b1 >>= (\c1 -> gooddiv a2 b2 >>= (\c2 -> return (c1 + c2)))
-}