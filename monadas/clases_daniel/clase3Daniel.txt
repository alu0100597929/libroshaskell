Francisco Nebrera Perdomo

eys
tiens un momento?

Daniel Díaz

diga

Francisco Nebrera Perdomo

tienes un correo con un archivo
k no compila
exactamente copiado de lo tuyo
e intenté hacer que compilara

Daniel Díaz

a ver
primero de todo, en la línea 39
t ya tiene contexto Pointed, no hace falta que lo repitas
segundo, Pointed es una clase, no un tipo, ¿cómo tratas de hacerle instancias?

Francisco Nebrera Perdomo

pues se ve que tengo un lío
xDDDDDDDDDD

Daniel Díaz

sí, tiene pinta
puede hacer tipos instancia de clases, pero no clases instancia de clases
no tiene mucho sentido
una clase no tiene valores, sólo es un conjunto de métodos (funciones) compartidos por varios tipos (los que son instancia de esa clase)

Francisco Nebrera Perdomo

okok
tendré que aclarar conceptos un poco

Daniel Díaz

mira
si yo defino una clase
por ejemplo
class Cualquiera a where
algo :: a -> a
ahora mismo la clase cualquiera consiste en una función (algo)

Francisco Nebrera Perdomo

okok

Daniel Díaz

que puede ser usada con a = cualquier tipo que sea instancia de Cualquiera
ahora mismo, ninguno
pero puedo añadir
instance Cualquiera Int where
algo n = n + 1
ahora "algo" puede ser usada por elemento del tipo Int
ahora puedo añadir más instancias
y en eso consisten las clases

Francisco Nebrera Perdomo

okok

Daniel Díaz

nada que ver con clases en otros lenguajes

Francisco Nebrera Perdomo

en realidad, no
xD

Daniel Díaz

así que no te líes
a veces pienso que Haskell no me supuso tanto problema porque no conocía ningún otro lenguaje
leo a menudo que la gente tiene problemas confundiendo con conceptos externos
¿qué tal vas con el inglés?

Francisco Nebrera Perdomo

increíble
si es para leer libros/tutos perfecto

Daniel Díaz

https://www.youtube.com/watch?v=6COvD8oynmI

Francisco Nebrera Perdomo

y para oír gente hablando
hablarlo yo me cuesta
escribirlo sí lo escribo, con algún fallo

Daniel Díaz

ok, si miras ese link
a lo mejor te interesa

Francisco Nebrera Perdomo

claro, gracias niño

Daniel Díaz

cualquier lecture por SPJ mola
esta en particular trata sobre las clases en Haskell

Francisco Nebrera Perdomo

tiene pinta de ser un pro

Daniel Díaz

programador principal del primer GHC, y uno de los diseñadores del lenguaje
es una de las personas más respetadas en la comunidad Haskell

Francisco Nebrera Perdomo

joder
xDDDDDDDDd
pues está bien saberlo
yo conozco a los típicos un poco
erik meijer
richard bird
todos esos xD
graham hutton

Daniel Díaz

aha
los más didácticos

Francisco Nebrera Perdomo

sí
xD

Daniel Díaz

¿sigues usando GHC 7.10?

Francisco Nebrera Perdomo

sí
estoy ahora entendiendo tu truco
para Writer
está curioso
los let me traban siempre durante unos 30 segs
después los pillo
como tú bien dices
mirar el tipo de todo
es lo que realmente ayuda

Daniel Díaz

es el único modo, creo yo
conocer o tener una intuición de los tipos de tus expresiones

Francisco Nebrera Perdomo

sí
me traba un poco

Daniel Díaz

al fin y al cabo, saber lo que estás haciendo

Francisco Nebrera Perdomo

que uses el constructor
let Writer m' b = f a

Daniel Díaz

si no conoces tus tipos, probablemente tampoco sepas lo que estás haciendo
aha
cuando el tipo sólo tiene un constructor
puedes hacer eso
cuando tiene más de uno, puedes... pero NO lo hagas
xD

Francisco Nebrera Perdomo

okok
xDDDDDDDDD
pues esto no quiere compilar
dice que no
xD

Daniel Díaz

¿qué le pasa ahora?

Francisco Nebrera Perdomo

data Writer m a = Writer m a

class ForWriter t where
something :: t
combine :: t -> t -> t

instance ForWriter m => Monad (Writer m) where
return a = Writer something a

(>>=) :: Writer m a -> (a -> Writer m b) -> Writer m b
Writer m a >>= f =
let Writer m' b = f a -- esto se puede hacer porque el tipo sólo tiene un constructor
in Writer (combine m m') b
esa es la última parte, lo demás es todo =

Daniel Díaz

¿pero has sacado lo que estaba mal?

Francisco Nebrera Perdomo

creo que sí

Daniel Díaz

pasa el error aunque sea
vamos a tratar de ver qué nos dice
GHC es tu ayuda

Francisco Nebrera Perdomo

http://pastebin.com/1ED58iyP

Daniel Díaz

vale
veo problemas

Francisco Nebrera Perdomo

sí
creo que es porque no añadí contexto?

Daniel Díaz

no
eso no es lo que estoy viendo
veo que usas métodos de Monad en Applicative y Functor
el orden es Functor => Applicative => Monad
en Applicative, puedes usar Functor, porque tienes a Functor como superclase
pero no al revés

Francisco Nebrera Perdomo

okok

Daniel Díaz

ese es el primer problema que veo

Francisco Nebrera Perdomo

es que otras veces eso me había funcionado

Daniel Díaz

en GHC 7.8
Monad no es subclase de Applicative
funciona independiente
ahí te funcionaba

Francisco Nebrera Perdomo

joder
es que
llego a este tipo de cosas
y a la Typeclassopedia
y bueno.........

Daniel Díaz

es que
tampoco sé por qué usar un compilador que aún no ha salido
¿hay algún interés especial?

Francisco Nebrera Perdomo

sí
quiero que me compile arithmoi
pero ni con este nuevo va
xDDDDDDDDDd
este viene adaptado a llvm 3.5
y es más moderno
está casi acabado
xD
sale el día 20 de este mes creo recordar

Daniel Díaz

más nuevo no significa que te vayan a compilar más cosas, de hecho, los escritores de librerías no están obligados a que su código funcione con algo que no es definitivo

Francisco Nebrera Perdomo

tampoco funciona con 7.8.4
sólo con 7.6.3 y una versión concreta de LLVM

Daniel Díaz

eso ya es cosa del escritor de esa librería entonces

Francisco Nebrera Perdomo

claro
le mandé correo pero ese no es como tu
ese estará por ahí tirando coca
xd

Daniel Díaz

aha

Francisco Nebrera Perdomo

entonces? :S
qué hago?

Daniel Díaz

delicada cuestión

Francisco Nebrera Perdomo

xDDDDDDDDDDd

Daniel Díaz

https://bitbucket.org/dafis/arithmoi/issue/15/fails-to-compile-with-ghc-784-due-to-fllvm
¿esto es?
parece que se puede compilar sin llvm
cabal install arithmoi -f -llvm

Francisco Nebrera Perdomo

freinn@freinn-pc:~$ cabal install arithmoi -f -llvm
Resolving dependencies...
cabal: Could not resolve dependencies:
trying: arithmoi-0.4.1.1 (user goal)
next goal: base (dependency of arithmoi-0.4.1.1)
rejecting: base-4.8.0.0/installed-4da... (conflict: base =>
integer-gmp==1.0.0.0/installed-e06..., arithmoi => integer-gmp<1)
rejecting: base-4.7.0.2, 4.7.0.1, 4.7.0.0, 4.6.0.1, 4.6.0.0, 4.5.1.0, 4.5.0.0,
4.4.1.0, 4.4.0.0, 4.3.1.0, 4.3.0.0, 4.2.0.2, 4.2.0.1, 4.2.0.0, 4.1.0.0,
4.0.0.0, 3.0.3.2, 3.0.3.1 (global constraint requires installed instance)
Dependency tree exhaustively searched.
de todas formas
a arithmoi que le den por ahora
sólo me hace más vago
después te contaré xq

Daniel Díaz

ok ok

Francisco Nebrera Perdomo

yo lo que quiero es saber qué hacer
pa arreglar ese lío
bueno te lo cuento ya
esta mañana
me topé con esto
(xq yo quise)

Daniel Díaz

a ver

Francisco Nebrera Perdomo

https://projecteuler.net/problem=23
lo hice en haskell, pero iba extremadísimamente lento
me embajoné un montón
porque mi colega de al lado lo hizo en C++
e iba rapidísimo

Daniel Díaz

aha

Francisco Nebrera Perdomo

en cambio mi versión jamás terminaba
:S
otros problemas me funcionan muy rápido y bien
pero joder.........

Daniel Díaz

bueno, seguro que tu amigo sabe más C++ de lo que tú sabes Haskell

Francisco Nebrera Perdomo

me queda tanto que aprender
sí
claramente
xDDDDDDDDDDdd

Daniel Díaz

no es una buena comparación entonces

Francisco Nebrera Perdomo

por ejemplo, optimizaciones que copié
de internet
usaban arrays
en vez de listas
y mucha mónada de por medio

Daniel Díaz

bueno, eso tienes que ir poco a poco

Francisco Nebrera Perdomo

ok
lo intentaré
yo voy a seguir dándole

Daniel Díaz

la casa no se comienza a construir por el tejado

Francisco Nebrera Perdomo

lo que pasa que se ve que los frutos tardan en crecer
xd

Daniel Díaz

si quieres seguir el orden de instancias correcto, haz primero Functor, luego Applicative y luego Monad
ese código te valdrá con todos los GHC

Francisco Nebrera Perdomo

ok
entonces qué hago
que encajen los tipos?

Daniel Díaz

primero haz la instancia de Functor
la hicimos en el anterior chat
luego haz la de Applicative
en este punto sí puedes usar Functor, aunque no creo que te haga falta
luego haces la de Monad
en la que puedes usar "return = pure"
y el bind tal cual lo hicimos
ese sería el orden natural
de la clase más general a la más específica

Francisco Nebrera Perdomo

instance Functor (Writer m) where
fmap f (Writer m a) = Writer m (f a)

Daniel Díaz

a mi me convence

Francisco Nebrera Perdomo

sí
se lo tragó
xDDDDDDDDDd

Daniel Díaz

claro que sí
tiene sentido

Francisco Nebrera Perdomo

la de Applicative me está trabando
espera k voy a por un red bull, o dos
k noooooooooo, es broma
xD

Daniel Díaz

eso puede ser
pure ya sabes
pero <*>...
tal vez tengas que pensar para esa
mirar los tipos y ver cómo encajar las piezas...
realmente, es más fácil que bind
pero, como con Monad, te va a hacer falta añadir una superclase en el contexto

Francisco Nebrera Perdomo

pure no se
xD

Daniel Díaz

pero si pure = return
si sabías return, sabes pure
es un fallo histórico, realmente debería existir sólo una de ellas
pero existen las dos para no romper código que use uno o el otro

Francisco Nebrera Perdomo

es que no sabía return
eso me lo pusiste tú

Daniel Díaz

ah ok

Francisco Nebrera Perdomo

como ves, me manejo de culo, especialmente hoy
deja ver si pillo el tipo de <*>

Daniel Díaz

ok
aunque pure debería ser más fácil!

Francisco Nebrera Perdomo

pure (Writer m a) = Writer something a

Daniel Díaz

usando la clase que hicimos sí
aunque, esa clase sólo era por intereses didácticos, para que vieras por qué el contexto que se usa es Monoid
puedes usar Monoid directamente

Francisco Nebrera Perdomo

ok
pero es que me veo muy verde e inseguro
intentaré hacerlo de las dos maneras

Daniel Díaz

es igual
pero something = mempty
combine = mappend

Francisco Nebrera Perdomo

okok
creo
que sin repasar LYAH
imposible
de memoria es imposible xq hace mucho que lo leí

Daniel Díaz

pues nada, a manejar los basics
¿dónde estás teniendo el problema?

Francisco Nebrera Perdomo

<*>) :: f (a -> b) -> f a -> f b
de dónde saco esa función?
en un (Writer m a)

Daniel Díaz

en este caso
f = Writer m
(<*>) :: Writer m (a -> b) -> Writer m a -> Writer m b
por lo que uno empieza...
Writer m f <*> Writer m' a = ...
y le quedan pocas opciones que poner a la derecha del igual...
si el resultado tiene que ser de tipo "Writer m b"

Francisco Nebrera Perdomo

se ve que no tengo clara tu metodología
xD

Daniel Díaz

y todos los valores de ese tipo empiezan con "Writer..."

Francisco Nebrera Perdomo

pero la tengo que seguir sí o sí

Daniel Díaz

Writer m f <*> Writer m' a = Writer ...
ahora, Writer :: m -> b -> Writer m b
primero tengo que darle algo de tipo "m"
en scope tengo dos cosas de ese tipo: m y m'
mis posibilidades son, por tanto, devolver "m", devolver "m'", o devolver una combinación de los dos (mappend m m')
lo último parece lo más sensato, para eso añadimos el contexto Monoid (o de la otra clase, me da igual)
entonces vamos
Writer m f <*> Writer m' a = Writer (mappend m m') ...
lo que nos queda tiene que tener tipo b
sabemos que 
f :: a -> b
a :: a
así pues...
Writer m f <*> Writer m' a = Writer (mappend m m') (f a)

Francisco Nebrera Perdomo

okok

Daniel Díaz

y ahí terminamos

Francisco Nebrera Perdomo

perfecto

Daniel Díaz

¿fue claro así?

Francisco Nebrera Perdomo

sí, perfecto
no le apetece compilar
xd

Daniel Díaz

algo habrás puesto mal
no le eches la culpa al compilador
jaja

Francisco Nebrera Perdomo

instance ForWriter m => Applicative (Writer m) where
pure (Writer m a) = Writer something a
Writer m f <*> Writer m' a = Writer (combine m m') (f a)
xDDD

Daniel Díaz

¿cuál es el tipo de pure?

Francisco Nebrera Perdomo

no sé
xD

Daniel Díaz

¿cuál es el tipo de return?

Francisco Nebrera Perdomo

ok
arreglado
xDDDDDDDDDD
diosss
puta bida
xD

Daniel Díaz

calma, hombre

Francisco Nebrera Perdomo

joder
pues cojonudo
ahora entiendo todo bastante más

Daniel Díaz

chachi

Francisco Nebrera Perdomo

sobre todo he entendido que para esto hay que empollar
xd

Daniel Díaz

realmente no hay que pensar creativamente
data Writer m a = Writer m a
te dice cómo son todos los valores de ese tipo
así que los argumentos no podían tener otra forma 
y el resultado tampoco
(hablando de <*>)

Francisco Nebrera Perdomo

okok
y la queja de que es ilegal la declaración de tipos
es xq como esas funciones todas pertenecen a sus respectivas clases monad, applicative y functor
no puedo decir de repente que son de otro tipo no?
son del que son

Daniel Díaz

no entiendo la pregunta...

Francisco Nebrera Perdomo

sorry xD
a ver

Daniel Díaz

¿qué declaración de tipo es ilegal?

Francisco Nebrera Perdomo

yo intenté en vez de poner las cosas directamente
intenté copiar las declaraciones de tipo
encima de cada una

Daniel Díaz

aaaah
vale
pero el tipo ya está puesto
en la definición de la clase
sólo que la variable de la clase se instancia al tipo de la instancia
valga la redundancia

Francisco Nebrera Perdomo

okok
interesante
xDDDDDDDDDDD

Daniel Díaz

no sé si se entendió

Francisco Nebrera Perdomo

totalmente
era lo que yo te estaba explicando
pero escrito formalmente

Daniel Díaz

ok, guay

Francisco Nebrera Perdomo

xd

Daniel Díaz

"formalmente"

Francisco Nebrera Perdomo

sí
matemático tenías que ser
si no ves símbolos raros
no es formal
xDDDDDDDDDDD
letras griegas, rusas, alien
:D

Daniel Díaz

tampoco
de hecho, escribo matemáticas bastante textuales
no me gusta abusar de simbología

Francisco Nebrera Perdomo

ah okok
tienes libros? o blogs o qué?

Daniel Díaz

un blog de programación por ahí olvidado...
realmente no tengo mucho que compartir
es algo que tengo que cambiar

Francisco Nebrera Perdomo

no te entiendo
no tienes mucho que compartir en qué sentido?

Daniel Díaz

que no tengo apenas nada público

Francisco Nebrera Perdomo

mis contribuciones a internet

Daniel Díaz

salvo las librerías de Haskell

Francisco Nebrera Perdomo

han sido pocas
por ejemplo
hice una recopilación de libros de matemáticas
si quieres te la puedes bajar
y después, ayer actualicé un poco la entrada de Haskell en wikipedia
porque daba hasta pena
seguían usando el patrón (n+ k)
porque sacaron todo de razonando con haskell
pero el lenguaje ha cambiado mucho
yo te recomiento
recomiendo*
y te lo digo xq lo hice ayer
que te crees un github
con proyectos propios que te gustaría que la gente conociera
por ejemplo
ser el tío que hizo
Data.Matrix
es algo cojonudo
pa poner en el curriculum

Daniel Díaz

jaja, más de eso tengo en el curriculum
pero en el lado matemático, no hay mucho por ahí
cuando termine mi investigación del binary transform publicaré algo

Francisco Nebrera Perdomo

eso de qué va?
así por encima

Daniel Díaz

es un transformador de secuencias finitas
la definición en sí es bastante general
pero luego hay aplicaciones
en plan compresión de datos

Francisco Nebrera Perdomo

okok

Daniel Díaz

se parece un poco a wavelets, pero llevado un poco al álgebra

Francisco Nebrera Perdomo

suena bien
pues sí
haz de todo
no pares
sobre todo rollos intelectuales

Daniel Díaz

jaja no pienso

Francisco Nebrera Perdomo

la frase del quijote más pro es

Daniel Díaz

aunque mi gran proyecto ahora es otro...

Francisco Nebrera Perdomo

"Sábete Sancho, que no es un hombre más que otro, si no hace más que otro"

Daniel Díaz

tengo alguna otra cosa más por Haskell: http://hackage.haskell.org/user/DanielDiaz

Francisco Nebrera Perdomo

joder
xDDDDDDDDd
se ve que el lenguaje te gustó
xDDDDDDDDDd
yo espero llegar a tu nivel algún día

Daniel Díaz

más todo el código privado que tengo, que es bastante

Francisco Nebrera Perdomo

guay
xDDDDDDDD
sisi, con el tiempo se va produciendo bastante
pero ahora mismo
veo el lenguaje un mundo

Daniel Díaz

sí, sobretodo si trabajas en Haskell
pues todos los días algo escribes

Francisco Nebrera Perdomo

pero conseguir trabajo con haskell difícil no?
o tu crees que tendría posibilidades?

Daniel Díaz

ahora mismo no te veo
pero si estudias, no veo por qué no

Francisco Nebrera Perdomo

jasjkasjkas
xD
no, la verdad que ahora mismo
lo tengo jodido xD
sisi, vamos a ver si le doy bastante caña
lo que me jode es que en el trabajo (prácticas en empresa)
no me dejan tocarlo

Daniel Díaz

este me gusta bastante más que el package matrix: http://hackage.haskell.org/package/binary-list-1.0.1.0/docs/Data-BinaryList.html

Francisco Nebrera Perdomo

eso hoy

Daniel Díaz

O(1) append, split, length, ...

Francisco Nebrera Perdomo

me hubiera salvado la vida
un poco

Daniel Díaz

está bastante bien

Francisco Nebrera Perdomo

porque hacer una búsqueda binaria
hubiera sido bastante óptimo

Daniel Díaz

esto no es árbol binario
es... bueno lo pone ahí

Francisco Nebrera Perdomo

ya ya
la búsqueda binaria
es sobre vectores
en C, C++

Daniel Díaz

"Binary lists are lists whose number of elements is a power of two"
oh ok

Francisco Nebrera Perdomo

es ir partiendo la lista
en 2
recursivamente

Daniel Díaz

sí, realmente es más o menos eso...
aunque internamente sí es un árbol binario
pero está todo abstraido
y para el usuario de la librería es sólo una lista "mágica"
que por construcción es imposible que tenga otro número de elementos que no sea una potencia de dos
cosas que valen la pena de Haskell

Francisco Nebrera Perdomo

está cojonudo, sí
es una gran parida
es rarísimo
que no lo sepas

Daniel Díaz

abajo del todo hay un ejemplo implementado en Fast Fourier Transform

Francisco Nebrera Perdomo

xq como solo has visto haskell

Daniel Díaz

te dije que empecé con Haskell...

Francisco Nebrera Perdomo

claro jajaja

Daniel Díaz

aunque no es lo único que sé

Francisco Nebrera Perdomo

ahh coño
okok

Daniel Díaz

pero sí lo único que domino
a este nivel

Francisco Nebrera Perdomo

yo decía en plan
si tienes 1 4 6 12 20 25

Daniel Díaz

me he visto manejando C en el pasado...

Francisco Nebrera Perdomo

y estás buscando un 25
partes en 2, como es mayor que el medio, pasas a la segunda mitad
y así recursivamente encuentras el 25 "rápidamente"
en vectores grandes va perfecto
fijo que con un par de trucos

Daniel Díaz

jaja sí, ejemplo curioso, si quieres un 25... usa 25!! jaja

Francisco Nebrera Perdomo

xDDDDDDD
no hombre xD

Daniel Díaz

ya ya, es broma

Francisco Nebrera Perdomo

se trata de que tú quieres saber si está o no ahi
xD
okok
entonces fijo que un par de trucos
permiten que tu clase haga eso

Daniel Díaz

bueno, supongo que es muy diferente

Francisco Nebrera Perdomo

aunque requiere que los elementos estén ordenados

Daniel Díaz

en funcional los algoritmos son diferentes
no, no hay nada de orden aquí
son listas de elementos arbitrarios

Francisco Nebrera Perdomo

okok
bueno
voy a disparar

Daniel Díaz

?

Francisco Nebrera Perdomo

tú crees que haskell tiene futuro?
es decir, dicen que vale pa paralelismo
web

Daniel Díaz

creo que tiene presente
el futuro nadie lo sabe
y sí, tiene todo eso
paralelismo gratis
programación web... nunca es ideal
ni en Haskell ni fuera de Haskell
pero en Haskell es cierto que tienes ciertas ventajas

Francisco Nebrera Perdomo

a mí tampoco me gusta la programación web
pero si me meto en haskell es pa meterme de lleno
sin medias tintas

Daniel Díaz

a mi me gusta... pero considero que es un mundo sucio que deberían repensar

Francisco Nebrera Perdomo

total
xDDDDDDDDD
y cuánto tardaste

Daniel Díaz

html, css, javascript, soluciones ad-hoc por todas partes

Francisco Nebrera Perdomo

en comprender todo en plan bien

Daniel Díaz

mmmm

Francisco Nebrera Perdomo

y hacer programas óptimos?

Daniel Díaz

en dos meses escribí mi primer juego
más o menos...
no recuerdo

Francisco Nebrera Perdomo

y eso qué conceptos implicaba?

Daniel Díaz

pues un poco de todo, supongo
pero vamos, era terrible código

Francisco Nebrera Perdomo

o sea que en 2 meses aprendiste mónadas y todo?

Daniel Díaz

sí

Francisco Nebrera Perdomo

joder.......
xd
k crack

Daniel Díaz

en clase nunca daban nada nuevo para mi
así que al final de cada clase, charlaba con el profe para que me resolviera mis dudas
así fue como avanzaba

Francisco Nebrera Perdomo

ah coño
okok

Daniel Díaz

tenía un ayudante

Francisco Nebrera Perdomo

ah
kjasjkasjkas
okok
se me ocurre una analogía
de dos interfaces silla-teclado entre tenerife y málaga
xd

Daniel Díaz

jajaja
sí
aunque, lo mío eran dudas puntuales
esto son clases totales!
jajaja

Francisco Nebrera Perdomo

xDDDDDDDD
en realidad sí

Daniel Díaz

debería echarle una visita a Pepe Gallardo
nunca voy a estar suficientemente agradecido

Francisco Nebrera Perdomo

hombre si no te queda lejos
obviamente puedes ir

Daniel Díaz

mis facturas las paga lo que él me enseñó!

Francisco Nebrera Perdomo

xDDDDDDDDDDdd
sisi yo espero aprender todo a gusto
ahora estoy medio vago porque te tengo pa ayudarme
pero tampoco quiero abusar demasiado

Daniel Díaz

voy a tener que retenerme entonces
para que no vaguees!

Francisco Nebrera Perdomo

espero coger vuelo xD
askjaskjas
a la gente le suelen costar las mónadas no?
es un poco raro
aunque sí es verdad que todo cobra sentido

Daniel Díaz

a la gente lo que le cuesta son las funciones de alto orden
no las mónadas en sí

Francisco Nebrera Perdomo

es decir
la curryficacion?

Daniel Díaz

funciones que tienen funciones como argumento

Francisco Nebrera Perdomo

a -> a -> a = a -> (a -> a)

Daniel Díaz

esa precisamente no
jaja

Francisco Nebrera Perdomo

ah
xD
pensaba que eso eran funciones de orden superior

Daniel Díaz

no, son las que tienen otras funciones como argumento

Francisco Nebrera Perdomo

ejemplo?

Daniel Díaz

foldr
(>>=)
fmap

Francisco Nebrera Perdomo

yo eso gracias a dios
lo pillé todo en LYAH y algún tuto por internet
menos el bind
pero el foldl y foldr
los tengo cojonudamente explicados en el tutorial
y sí es cierto que cuestan un poquito
pero es cuestión de tiempo

Daniel Díaz

seguro que aún te queda de aprender de ellos, pero ya verás más tarde por qué

Francisco Nebrera Perdomo

sí
yo se que están en las mónadas y demás
foldM
y foldM_ y demás
si que los he visto por ahí
y unas clases raras Foldable y Traversable
tiene algo que ver?

Daniel Díaz

sí
foldr digamos que reduce una lista
usando un operador
pero este mismo concepto puede ser trasladado a cualquier contenedor
Foldable es la abstracción del foldr de listas
a cualquier otro contenedor

Francisco Nebrera Perdomo

okok
en realidad haskell está increíble
tiene cosas cojonudas
han desarrollado un sistema brutal
lo veo mucho más pro que otros lenguajes

Daniel Díaz

es más lógico...
menos chapucero...

Francisco Nebrera Perdomo

lo que me pasa es que
necesito más contacto con las matemáticas
algún conocimiento tengo pero
difuso y medio cutre

Daniel Díaz

no necesariamente
no creo que funcione así

Francisco Nebrera Perdomo

no no, no digo para haskell
sino para todo en general
xD

Daniel Díaz

entonces genial
de eso también sé un poquito

Francisco Nebrera Perdomo

xDDDDDDDDDDDDD
yo en principio debo acabar prácticas y proyecto
luego ya veré, pero seguiré en esto casi seguro
intenté meterme en el GSOC
https://ghc.haskell.org/trac/summer-of-code/ticket/1675#comment:1

Daniel Díaz

ya veo
qué horror el foldl
haha
por eso casi jamás se usa...

Francisco Nebrera Perdomo

es un bucle for
es esencialmente un jodido for acumulativo
xDDDDDDDD
encima no vale pa listas infinitas

Daniel Díaz

bueno, el foldr en ese cas
o

Francisco Nebrera Perdomo

el pobre es marginadísimo por la gente
xDD

Daniel Díaz

tampoco te va a sumar una lista infinita

Francisco Nebrera Perdomo

no ya
pero bueno

Daniel Díaz

en cambio foldl' sí es util

Francisco Nebrera Perdomo

condición de parada sana
libros que te gusten
de haskell?

Daniel Díaz

Real World Haskell
yo atacaría ese...
LYAH me gusta, pero ya sé que lo manejas

Francisco Nebrera Perdomo

hombre
lo manejo
pero sin tus explicaciones de mónadas
lo veía un poco jodido

Daniel Díaz

me refiero que lo conoces y tal.... lo estás usando

Francisco Nebrera Perdomo

ah sí xD
espera
https://github.com/freinn/libroshaskell

Daniel Díaz

no sé, en mi opinión falta literatura
literatura de papel con carcasa, me refiero

Francisco Nebrera Perdomo

si?
crees que la literatura es un poco insuficiente

Daniel Díaz

la typeclassopedia fue una lectura de lo más fructífera para mí en su momento...

Francisco Nebrera Perdomo

a día de hoy

Daniel Díaz

sí
online hay mucho
pero de papel y carcasa, poco

Francisco Nebrera Perdomo

sí

Daniel Díaz

y demasiados libros que usan Hugs

Francisco Nebrera Perdomo

uff pero la typeclassopedia

Daniel Díaz

es tenebroso

Francisco Nebrera Perdomo

me mata
xD
tendré que retomarla algún día
qué crees que debería saber para empezar a darle a Parsec?

Daniel Díaz

aaaaaaaaaah qué bonito
parsers en Haskell es lo más bonito...
creo que comprensión de Monad debería bastar

Francisco Nebrera Perdomo

parece que las monadas son requeridas
okok
me faltan usos

Daniel Díaz

aunque escribir una mónada parser tú mismo te ayudará

Francisco Nebrera Perdomo

he visto ejemplos

Daniel Díaz

lo cual es un ejercicio hermoso
o, al menos, lo fue para mi la primera vez que lo hice

Francisco Nebrera Perdomo

como el vídeo de Erik Meijer
okok
pues a ver si lo hago

Daniel Díaz

pero primero tienes un ejercicio pendiente

Francisco Nebrera Perdomo

hay un tutorial que está bien por lo que dice la gente
https://github.com/JakeWheat/intro_to_parsing/blob/master/GettingStarted.lhs

Daniel Díaz

mmmm
no sé
no veo que llegue a ninguna parte
yo escribí uno... pero usa attoparsec en lugar de parsec...
https://www.fpcomplete.com/school/starting-with-haskell/libraries-and-frameworks/text-manipulation/attoparsec
y es muy... "industrial"

Francisco Nebrera Perdomo

es que estaba con el tutorial ese de write yourself a scheme in 48 hours

Daniel Díaz

creo que lo que más te va a enseñar a programar en Haskell (y en cualquier lenguaje, supongo), es que te planteees cosas y trates de hacerlas
en plan... ¿cómo haría tal cosa? y pum, te pones

Francisco Nebrera Perdomo

pues mira
creo que voy a seguir tu idea
y pasar de ese tutorial quizá
le diré a mi tutor que haga como si en vez de haskell fuera C++ y listo

Daniel Díaz

jaja como veas

Francisco Nebrera Perdomo

joder
entonces según leo el attoparsec
ese va muy rápido

Daniel Díaz

sí... pero es un fastidio

Francisco Nebrera Perdomo

si?
no me jodas
Xd

Daniel Díaz

osea
cuando te da un error
si el input no es parseable
te va a decir cualquier cosa como mensaje de error
sin fila ni columna ni nada

Francisco Nebrera Perdomo

omg
xDDDDDDDDD
okok

Daniel Díaz

por eso es tan rápido, porque no mantiene ese tipo de información
parsea como loco nada más

Francisco Nebrera Perdomo

entonces empezaré por ese tutorial de parsec y listo

Daniel Díaz

¿qué quieres parsear?

Francisco Nebrera Perdomo

mi proyecto es
un compilador intérprete
de Scheme
pasa de Scheme a C
bueno
pasará, espero xD

Daniel Díaz

vaya joyita para empezar...

Francisco Nebrera Perdomo

xDDDDDDD

Daniel Díaz

osea, no sé cómo es Scheme

Francisco Nebrera Perdomo

pues
es un lenguaje funcional

Daniel Díaz

quizás es parecido a C
ah, pues no

Francisco Nebrera Perdomo

pero muuuuuuuuuuuuuucho más fácil de parsear
que haskell
todo paréntesis por todos lados
es un dialecto de lisp

Daniel Díaz

lisp...
el lenguaje sin paréntesis
yo hice un lenguaje de programación... https://github.com/Daniel-Diaz/rachel
este era el "prelude" https://github.com/Daniel-Diaz/rachel/blob/master/res/prelude.rach
se parece un poco a Haskell
un poco bastante...
pero el código es una locura porque no está documentado
y este no sólo pasa de una sintáxis a otra
realmente funciona

Francisco Nebrera Perdomo

joder
xDDDDDDDDD

Daniel Díaz

lo que pasa es que este lenguaje compila a sonido
es para hacer música
eso es lo que odio de mi, nunca realmente finalizo las cosas
aunque bueno, sinteticé un par de ritmos
pero faltaba muchísimo por pulir...

Francisco Nebrera Perdomo

tío
deja de trabarte
que bastante haces y sabes
como para encima
mirar más tus fallos que tus logros
lo que faltaba
Xd

Daniel Díaz

jaja no hombre
pero
son muchas cosas "a medias"
muuuchas
pero qué feliz cuando el intérprete funcionaba
con su inferencia de tipos y todo
evaluación perezosa
llamadas recursivas

Francisco Nebrera Perdomo

joder
xD
es que eso es lo que yo quiero
comprender más todo esto
hacer un compilador/intérprete estaría bien

Daniel Díaz

pero es una locura hacer un compilador entero
ahí lo estás viendo

Francisco Nebrera Perdomo

no pero a ver
se trata de una simple traducción
luego compilará GCC o quien sea

Daniel Díaz

sí
eso es más sencillo

Francisco Nebrera Perdomo

si luego hay que interpretar.......
xD
eso ni idea
pero mi profesor sí que se entera
lo que no quiere ni ver es haskell
él dice que haskell no lo va a tocar
xDDDDDDDDDDD

Daniel Díaz

wow

Francisco Nebrera Perdomo

menos mal que estás tú pa algo duro de vez en cuando
xD

Daniel Díaz

mira, te digo una cosa
en Haskell puedes definir tipos, verdad?

Francisco Nebrera Perdomo

sí
y luego es mucho más autoexplicativo y el compilador llora
cuando le pasas algo que no es
xDDDDDDDD

Daniel Díaz

un tipo podría ser el tipo de los elementos sintácticamente válidos de Scheme
otro el de los de C (que necesites, no necesitas toda la sintáxis)
llamemos a estos tipos
SchemeCode y CCoe
*CCode

Francisco Nebrera Perdomo

ok

Daniel Díaz

tu tarea es escribir una función
translate :: SchemeCode -> CCode
¿no?

Francisco Nebrera Perdomo

algo así

Daniel Díaz

vamos, eso

Francisco Nebrera Perdomo

realmente sí

Daniel Díaz

una vez tengas eso
puedes escribir un parser que tendrá tipo
parseScheme :: String -> Either String SchemeCode
y un printer
printCCode :: CCode -> String
pues ahí tienes el esquema de tu trabajo
ala!!!

Francisco Nebrera Perdomo

ok
los parser que yo vi
devolvían una lista

Daniel Díaz

la vida loca de los parsers indeterminados

Francisco Nebrera Perdomo

de (cosa,string_restante)

Daniel Díaz

sí sí, lo que yo te diga xD
parsers indeterminados

Francisco Nebrera Perdomo

sí pero
molaría que me hablaras

Daniel Díaz

pero, no veo práctico que uses eso para esto

Francisco Nebrera Perdomo

en castellano
xDDDDDDDDDDd

Daniel Díaz

pues

Francisco Nebrera Perdomo

no tengo ni puta idea de parsers

Daniel Díaz

indeterminado es que puede tener diferentes salids

Francisco Nebrera Perdomo

jamás hice uno

Daniel Díaz

no una única

Francisco Nebrera Perdomo

el tipo Either
me inclina a pensar que la string será una especie de error

Daniel Díaz

indeterminado es que con el mismo argumento, te puede devolver varias cosas

Francisco Nebrera Perdomo

y si todo va perfecto dará en Schemecode

Daniel Díaz

y tu intuición es correcta
un ejemplo de tipo representando una sintáxis...
https://github.com/Daniel-Diaz/rachel/blob/master/Rachel/Types.hs#L167

Francisco Nebrera Perdomo

joder
xDDDDDDDDD
está wapo
pues tío gracias por la ayuda y demás
en parsec
hay parsers indeterminados de eso?

Daniel Díaz

no

Francisco Nebrera Perdomo

esos*
uffffffff
entonces?
es que eso de que no cante los errores........

Daniel Díaz

es determinado
canta errores
pero no te da diferentes posibilidades de output
osea
un mismo input

Francisco Nebrera Perdomo

claro, me refería a attoparsec

Daniel Díaz

va a tener un mismo output
parsec si tiene buenos mensajes de error
super buenos
a fin de cuentas
attoparsec es adecuado para cuando lo que estás parseando ha sido generado por un programa
parsec para cuando ha sido generado por un humano

Francisco Nebrera Perdomo

ok
entonces mi caso es un poco más de parsec
joder
pues gracias de nuevo hombre

Daniel Díaz

nada

Francisco Nebrera Perdomo

a ver si con las dos clases, en realidad 3
que me has dado
ya soy capaz de enfrentarme a eso con más garantías

Daniel Díaz

vuelve a tus clases functor y tal, hasta que tengas el writer bien escrito
y hagas el ejercicio que te dije

Francisco Nebrera Perdomo

me falta empollar un poco
el writer está perfecto
ya
xD

Daniel Díaz

pues demúestrame que cumple las leyes de Monad!

Francisco Nebrera Perdomo

lo pasaré a monoid en vez d combine y something
okok
lo voy a intentar estos días en cuanto tenga tiempo

Daniel Díaz

k

Francisco Nebrera Perdomo

tú como me ves?
retraso?
normal?
listo?
xD

Daniel Díaz

¿para qué cosa
?

Francisco Nebrera Perdomo

pa haskell en concreto xD
porque joder si tu lo aprendiste en 2 meses
yo llevo mas
xd

Daniel Díaz

cualquiera puede, sólo tienes que dedicarte
yo soy medio friki
no te compares, carajo
no es esa la intención
si te interesa, lo harás

Francisco Nebrera Perdomo

okok
pues na, gracias tt

Daniel Díaz

¿qué es tt?

Francisco Nebrera Perdomo

ya hablamos otro día xq tengo k cenar y demás

Daniel Díaz

al principio creía que era un error

Francisco Nebrera Perdomo

jajajaj
xD

Daniel Díaz

pero veo que lo repites

Francisco Nebrera Perdomo

no has visto a rafa mora?

Daniel Díaz

no
¿es de TV?

Francisco Nebrera Perdomo

http://cdn.meme.am/instances/45724694.jpg
tete es como "colega" en valencia
y a mí se me pegó
por forocoches xDDDDDDDDD

Daniel Díaz

ok
no sé mucho de esas cosas

Francisco Nebrera Perdomo

todo el mundo dice lo de puta bida tete
xDDDDDDDDDD
buah
yo he perdido
mi vida
con
internet + videojuegos
xDDDDDDDDDDD
ahora estoy intentando remontar
xDDDDDDDDDD
pero bueh, así se un poco de todo
bueno niño l odicho

Daniel Díaz

yo de videjuegos sí tengo historial...
que cenes bien
chao

Francisco Nebrera Perdomo

ya hablamos, gracias, y hablaremos de más rollos si quieres
xq siempre haskell
al final te tendré que ingresar euros y todo
sajjkasjkas
xD
bueno venga niño dew

Daniel Díaz

chao