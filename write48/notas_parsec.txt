####### Notas sobre Parsec #######

La mónada sobre la que opera Parsec es GenParser.

Parsec se puede leer en "inglés plano" (siempre que nuestros parsers tengan los nombres adecuados).

Cualquier parser que usemos nos dará un Parser Tipo_que_sea, lo cual es un valor monádico.

el operador <- liga a un nombre lo que hay dentro de la mónada sobre la cual opera (GenParser). Por tanto, si opera sobre:

* many, many1, string...devolverá una String

* char...devolverá un Char

A su vez, si queremos aplicar funciones a los valores que están dentro de una mónada, debemos usar liftM funcion valor_monádico. liftM permite cambiar el tipo de lo que hay dentro de la mónada, y por ejemplo en:

parseNumber :: Parser LispVal
parseNumber = liftM (Number . read) $ many1 digit

many1 digit devuelve una Parser String, y luego liftM (Number . read) aplica read a esa String dentro de la mónada, y consigue un Integer (que es lo que recibe el constructor de tipo de LispVal, Number). Por tanto partimos de una Parser String para llegar a una Parser LispVal.

- noneOf no consume aquella entrada que no debe, dicha entrada es una condición de parada.

<|> es el operador de elección. Pueden ser encadenados tantos parsers como queramos. Este operador lo que hace es:

1. intenta el parser de la izquierda, que no debería consumir entrada...(ver 'try')

2. intenta el parser de la derecha.

Si el parser de la izquierda consume entrada, podríamos usar try...intenta ejecutar ese Parser, y, si falla, vuelve al estado anterior, es decir, deja la entrada sin consumir. Sólo funciona a la izquierda de <|>, es decir, si queremos encadenar varios 'try', deben estar a la izquierda de la cadena de <|>. try es como un lookahead, y se puede ver como algo para procesar cosas de manera atómica. try es backtracking, y por ello no es demasiado eficiente.

char consume entrada, si puede.

* ver la mónada GenParser en la documentación oficial de Parsec.

>> lo que hace es encadenar parsers, si tienen éxito, se ejecuta el siguiente. El parser que preceda a >> no ligará su resultado a ningún nombre. >> consume entrada, y falla si ambos argumentos (parsers) fallan.

type CharParser st a = GenParser Char st a

<?> lo que hace es informar de un error si es que se produce (en tiempo de ejecución).

<$> es sinónimo de fmap.

between parsea el carácter de apertura, luego el parser, después el de cierre y se queda con lo que parser haya parseado.

type ReadS a = String -> [(a, String)] En realidad esta función reads se trata de un parser, como su propio tipo indica.