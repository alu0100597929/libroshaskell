TODO:

rewrite the value expressions and query expressions using the new
style and building on the previous code

write the token tutorial, and see if will use this module in the
parser. I think there are too many problems, but should try to
understand the source for some ideas to steal.

go back and finish off all the little todos (and not so little todos).

maybe start finding links to all sorts of things to put all over the tutorials


prepare for fpcomplete site:
cat SimpleExpressionsAndCombinators.lhs | sed "s/^===/\###/"| sed "s/^==/\##/" | sed "s/^=/\#/" | runhaskell FixSchool.lhs |xclip

investigate how embedded code can be made runnable within the tutorial
on fpcomplete

review and remove explicit explanations where feasible, replace with
more examples.

docs todo to continue after the simple sql parser module is done,
listed in README

some of the big tasks with big unknowns:
new expression parser generator, maybe use in from clause also
understanding error messages and shaping the parser
sql standard support
supporting dialects


---------

co-ordination:

keep working on simple-sql-parser in parallel to add the complete set
of features for the ansi sql support

then create steps to get to this point from this tutorial parser, so
the current simple-sql-parser code will be completely discarded at
some point.

start working on extended package which can replace hssqlppp:
typechecking + ddl, procedural, etc. Should use uuagc?

--

Follow up tutorials/projects

simple implementation of limited sql queries via physical operators in
Haskell

implementing sql aggregates article -> focus on the transformation
from SQL to physical operators

in depth discussion of sql query syntax, the meaning, implementation
  notes and syntax choice notes

article about window functions?

maybe simple hybrid implementation of selectlists and where with
haskell and c++, can talk about some design choices and some
optimisation of the select lists, plus have some serious c++ code.

c++ parser


rewrite parser in uuparse and in polyparse to compare code +
  performance + error messages
maybe rewrite parser using demo hand written parser combinator lib to
  compare the same

--

maybe this should come later in a document:

introduction:
what is parsing, parse tree, ast, pretty printing, (+semantic
  checking, optimisation, intepreting, compiling)
  parse trees, abstract and concrete syntax, abstract interpretation
what is parsing good for: replaces regexes, can be used for dsls and
  for working in a heterogenous system

what can the SQL parser be used for

document creation:
text + syntax highlighting: use pandoc/markdown?
document structure + nav ??
diagramming tools: declarative language + drawn
interactive prompts
